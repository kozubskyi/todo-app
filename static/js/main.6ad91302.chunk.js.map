{"version":3,"sources":["components/Stats/Stats.js","components/TodoList/TodoList.js","components/Todo/Todo.js","components/TodoCreator/TodoCreator.js","components/Backdrop/Backdrop.js","components/TodoEditor/TodoEditor.js","App.js","index.js"],"names":["Stats","todos","className","length","filter","todo","completed","TodoList","children","Todo","array","upTodo","downTodo","handleTodoEdit","handleTodoDelete","onTodoClick","map","type","id","onChange","checked","htmlFor","text","onClick","indexOf","TodoCreator","min","max","handleFormSubmit","useState","setText","placeholders","formReset","onSubmit","event","preventDefault","uuidv4","value","target","autoComplete","placeholder","Math","floor","random","Backdrop","closeEditingForm","body","document","querySelector","style","height","scrollHeight","TodoEditor","todoText","handleTodoTextEdit","autoFocus","App","state","todoToUpdateText","todoToUpdateId","isTodoEditing","setState","index","newTodos","clickedTodo","splice","console","log","localStorage","setItem","JSON","stringify","prevState","parse","getItem","this","prevProps","isTodoDeleting","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ad91302.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Stats.scss';\r\n\r\nconst Stats = ({ todos }) => {\r\n  return (\r\n    <>\r\n      <div className=\"stats\">\r\n        <button className=\"stats__btn stats__all-todos\">{todos.length}</button>\r\n        <button className=\"stats__btn stats__undone-todos\">{todos.filter(todo => !todo.completed).length}</button>\r\n        {/* <button className=\"stats__btn stats__important-todos\">\r\n          {todos.filter(todo => todo.type === 'important' && !todo.completed).length}\r\n        </button> */}\r\n        <button className=\"stats__btn stats__done-todos\">{todos.filter(todo => todo.completed).length}</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React from 'react';\r\n\r\nconst TodoList = ({ children }) => {\r\n  return <ul className=\"todo__list\">{children}</ul>;\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\n\r\nimport './Todo.scss';\r\n\r\n//* Todo как обычная функция (переписанная на хуки)\r\n\r\nconst Todo = ({ todos, upTodo, downTodo, handleTodoEdit, handleTodoDelete, onTodoClick }) => {\r\n  const makeMarkup = array => {\r\n    return array.map(todo => {\r\n      return (\r\n        <li className={`todo__item ${todo.type}`} key={todo.id}>\r\n          <input type=\"checkbox\" id={todo.id} onChange={() => onTodoClick(todo.id)} checked={todo.completed} />\r\n          <label htmlFor={todo.id}>{todo.text}</label>\r\n          <div className=\"move-todo-block\">\r\n            <button type=\"button\" className=\"move-todo up-todo\" onClick={() => upTodo(array.indexOf(todo))}></button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"move-todo down-todo\"\r\n              onClick={() => downTodo(array.indexOf(todo))}\r\n            ></button>\r\n          </div>\r\n          <button type=\"button\" className=\"edit-todo\" onClick={() => handleTodoEdit(todo.text, todo.id)}></button>\r\n          <button type=\"button\" className=\"delete-todo\" onClick={() => handleTodoDelete(todo.id)}></button>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  // const importantTodos = todos.filter(todo => todo.type === 'important' && !todo.completed);\r\n  // const standartTodos = todos.filter(todo => todo.type === 'standart' && !todo.completed);\r\n  // const completedTodos = todos.filter(todo => todo.completed);\r\n\r\n  return (\r\n    <>\r\n      {makeMarkup(todos)}\r\n      {/* {makeMarkup(importantTodos)}\r\n          {makeMarkup(standartTodos)}\r\n          {makeMarkup(completedTodos)} */}\r\n    </>\r\n  );\r\n};\r\n\r\n//* Todo написанная классом\r\n\r\n// class Todo extends Component {\r\n//   componentDidMount() {\r\n//     console.log('componentDidMount');\r\n//   }\r\n\r\n//   componentWillUnmount() {\r\n//     console.log('componentWillUnmount');\r\n//   }\r\n\r\n//   makeMarkup = array => {\r\n//     return array.map(todo => {\r\n\r\n//       return (\r\n//         <li className={`todo__item ${todo.type}`} key={todo.id}>\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             id={todo.id}\r\n//             onChange={() => this.props.onTodoClick(todo.id)}\r\n//             checked={todo.completed}\r\n//           />\r\n//           <label htmlFor={todo.id}>{todo.text}</label>\r\n//           <div className=\"move-todo-block\">\r\n//             <button\r\n//               type=\"button\"\r\n//               className=\"move-todo up-todo\"\r\n//               onClick={() => this.props.upTodo(array.indexOf(todo))}\r\n//             ></button>\r\n//             <button\r\n//               type=\"button\"\r\n//               className=\"move-todo down-todo\"\r\n//               onClick={() => this.props.downTodo(array.indexOf(todo))}\r\n//             ></button>\r\n//           </div>\r\n//           <button type=\"button\" className=\"edit-todo\"></button>\r\n//           <button type=\"button\" className=\"delete-todo\" onClick={() => this.props.handleTodoDelete(todo.id)}></button>\r\n//         </li>\r\n//       );\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     // const importantTodos = this.props.todos.filter(todo => todo.type === 'important' && !todo.completed);\r\n//     // const standartTodos = this.props.todos.filter(todo => todo.type === 'standart' && !todo.completed);\r\n//     // const completedTodos = this.props.todos.filter(todo => todo.completed);\r\n\r\n//     return (\r\n//       <>\r\n//         {this.makeMarkup(this.props.todos)}\r\n\r\n//         {/* {this.makeMarkup(importantTodos)}\r\n//           {this.makeMarkup(standartTodos)}\r\n//           {this.makeMarkup(completedTodos)} */}\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport './TodoCreator.scss';\r\n\r\nconst TodoCreator = ({ todos, handleFormSubmit }) => {\r\n  const [text, setText] = useState('');\r\n  const [type, setType] = useState('standart');\r\n  const [placeholders, setPlaceholders] = useState([\r\n    'Сходить на футбол',\r\n    'Купить продукты',\r\n    'Навестить родственников',\r\n    'Купить подарок',\r\n    'Помыть посуду',\r\n    'Прибраться в доме',\r\n    'Починить что-то в доме',\r\n    'Сьездить в отпуск',\r\n    'Отправиться в путешествие',\r\n    'Вынести мусор',\r\n    'Купить вкусняшек',\r\n  ]);\r\n\r\n  const onFormSubmit = event => {\r\n    event.preventDefault();\r\n    const todo = { id: uuidv4(), text, type, completed: false };\r\n    todo.text !== '' && handleFormSubmit(todo);\r\n    formReset();\r\n  };\r\n\r\n  const formReset = () => setText('');\r\n\r\n  const changeInputValue = event => setText(event.target.value);\r\n\r\n  const getRandomInRange = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  return (\r\n    <form className=\"todo-creator__form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={text}\r\n        onChange={changeInputValue}\r\n        autoComplete=\"off\"\r\n        placeholder={placeholders[getRandomInRange(0, placeholders.length - 1)]}\r\n      />\r\n      <button type=\"submit\">Добавить</button>\r\n    </form>\r\n  );\r\n};\r\n\r\n//* TodoCreator написанный классом\r\n\r\n// class TodoCreator extends Component {\r\n//   static defaultProps = {\r\n//     text: '',\r\n//     type: 'standart',\r\n//   };\r\n\r\n//   state = {\r\n//     text: this.props.text,\r\n//     type: this.props.type,\r\n//     placeholders: [\r\n//       'Сходить на футбол',\r\n//       'Купить продукты',\r\n//       'Навестить родственников',\r\n//       'Купить подарок',\r\n//       'Помыть посуду',\r\n//       'Прибраться в доме',\r\n//       'Починить что-то в доме',\r\n//       'Сьездить в отпуск',\r\n//       'Отправиться в путешествие',\r\n//       'Вынести мусор',\r\n//       'Купить вкусняшек',\r\n//     ],\r\n//     // placeholder: '',\r\n//   };\r\n\r\n//   onFormSubmit = event => {\r\n//     event.preventDefault();\r\n//     const todo = { id: uuidv4(), text: this.state.text, type: this.state.type, completed: false };\r\n//     todo.text !== '' && this.props.handleFormSubmit(todo);\r\n//     this.formReset();\r\n//   };\r\n\r\n//   formReset = () => this.setState({ text: '' });\r\n\r\n//   changeInputValue = event => this.setState({ text: event.target.value });\r\n\r\n//   getRandomInRange(min, max) {\r\n//     return Math.floor(Math.random() * (max - min + 1)) + min;\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className=\"todo-creator__form\" onSubmit={this.onFormSubmit}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={this.state.text}\r\n//           onChange={this.changeInputValue}\r\n//           autoComplete=\"off\"\r\n//           placeholder={this.state.placeholders[this.getRandomInRange(0, this.state.placeholders.length - 1)]}\r\n//         />\r\n//         <button type=\"submit\">Добавить</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default TodoCreator;\r\n","import React from 'react';\r\n\r\nimport './Backdrop.scss';\r\n\r\nconst Backdrop = ({ closeEditingForm }) => {\r\n  const body = document.querySelector('body');\r\n\r\n  return <div className=\"backdrop\" style={{ height: body.scrollHeight }} onClick={closeEditingForm}></div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import React, { useState } from 'react';\r\n\r\nimport './TodoEditor.scss';\r\n\r\nconst TodoEditor = ({ todoText, handleTodoTextEdit, closeEditingForm }) => {\r\n  const [text, setText] = useState(todoText);\r\n\r\n  const onFormSubmit = event => {\r\n    event.preventDefault();\r\n    handleTodoTextEdit(text);\r\n    closeEditingForm();\r\n  };\r\n\r\n  const changeInputValue = event => setText(event.target.value);\r\n\r\n  return (\r\n    <form className=\"todo-editor__form\" onSubmit={onFormSubmit}>\r\n      <input type=\"text\" value={text} onChange={changeInputValue} autoComplete=\"off\" autoFocus />\r\n      <button type=\"submit\">Редактировать</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoEditor;\r\n","import React, { Component, useState, useEffect } from 'react';\n\nimport 'reset-css';\nimport './App.scss';\n\nimport Stats from './components/Stats/Stats';\nimport TodoList from './components/TodoList/TodoList';\nimport Todo from './components/Todo/Todo';\nimport TodoCreator from './components/TodoCreator/TodoCreator';\nimport Backdrop from './components/Backdrop/Backdrop';\nimport TodoEditor from './components/TodoEditor/TodoEditor';\n\n//* App как обычная функция (переписанная на хуки)\n\n// const App = () => {\n//   const [todos, setTodos] = useState([\n//     { id: 'id-1', text: 'Это важная Todo', type: 'important', completed: false },\n//     { id: 'id-2', text: 'Важные Todo выделены красным цветом', type: 'important', completed: false },\n//     { id: 'id-3', text: 'А это стандартная Todo', type: 'standart', completed: false },\n//     {\n//       id: 'id-4',\n//       text:\n//         'Что-бы добавить свою Todo необходимо в графе ниже ввести текст и нажать на кнопку Добавить, после чего новая Todo появится первой в списке',\n//       type: 'standart',\n//       completed: false,\n//     },\n//     {\n//       id: 'id-5',\n//       text:\n//         'Todo можно двигать выше и ниже при помощи стрелочек, что позволяет пользователю хранить Todo как ему больше нравится (например важные поднять повыше, а выполненные отправить вниз)',\n//       type: 'standart',\n//       completed: false,\n//     },\n//     {\n//       id: 'id-6',\n//       text: 'Карандашик позже будет давать возможность редактировать Todo',\n//       type: 'standart',\n//       completed: false,\n//     },\n//     {\n//       id: 'id-7',\n//       text: 'Крестик полностью удаляет Todo из списка',\n//       type: 'standart',\n//       completed: false,\n//     },\n//     {\n//       id: 'id-8',\n//       text: 'А вот так вот выглядит выполненная Todo',\n//       type: 'standart',\n//       completed: true,\n//     },\n//     {\n//       id: 'id-9',\n//       text: 'Чем больше выполненных Todo тем лучше ✅',\n//       type: 'standart',\n//       completed: true,\n//     },\n//     {\n//       id: 'id-10',\n//       text: 'Теперь можно удалять все эти Todo и добавлять свои 😊',\n//       type: 'standart',\n//       completed: true,\n//     },\n//   ]);\n\n//   // useEffect(() => {})\n\n//   // componentDidMount() {\n//   //   const todos = JSON.parse(localStorage.getItem('todos'));\n//   //   todos !== null && this.setState({ todos: todos });\n//   // }\n\n//   // componentDidUpdate(prevProps, prevState) {\n//   //   prevState.todos !== this.state.todos && localStorage.setItem('todos', JSON.stringify(this.state.todos));\n//   //   // localStorage.clear();\n//   // }\n\n//   const handleFormSubmit = todo => setTodos([todo, ...todos]);\n\n//   const upTodo = index => {\n//     if (index !== 0) {\n//       const newTodos = todos;\n//       const clickedTodo = newTodos[index];\n//       newTodos.splice(index, 1);\n//       newTodos.splice(index - 1, 0, clickedTodo);\n//       console.log(newTodos);\n\n//       setTodos(newTodos);\n//       console.log(todos);\n//       localStorage.setItem('todos', JSON.stringify(newTodos));\n//     }\n//   };\n\n//   const downTodo = index => {\n//     if (index !== todos.length - 1) {\n//       const newTodos = todos;\n//       const clickedTodo = newTodos[index];\n//       newTodos.splice(index, 1);\n//       newTodos.splice(index + 1, 0, clickedTodo);\n//       console.log(newTodos);\n\n//       setTodos(newTodos);\n//       console.log(todos);\n//       localStorage.setItem('todos', JSON.stringify(newTodos));\n//     }\n//   };\n\n//   const handleTodoDelete = id => {\n//     setTodos(todos.filter(todo => todo.id !== id));\n//   };\n\n//   const onTodoClick = id => {\n//     setTodos(todos.map(todo => (todo.id === id ? { ...todo, completed: !todo.completed } : todo)));\n//   };\n\n//   return (\n//     <>\n//       <Stats todos={todos} />\n//       <TodoList>\n//         <Todo\n//           todos={todos}\n//           upTodo={upTodo}\n//           downTodo={downTodo}\n//           handleTodoDelete={handleTodoDelete}\n//           onTodoClick={onTodoClick}\n//         />\n//       </TodoList>\n//       <TodoCreator todos={todos} handleFormSubmit={handleFormSubmit} />\n//     </>\n//   );\n// };\n\n//* App написанный классом\n\nclass App extends Component {\n  state = {\n    todos: [\n      { id: 'id-1', text: 'Это важная Todo', type: 'important', completed: false },\n      { id: 'id-2', text: 'Важные Todo выделены красным цветом', type: 'important', completed: false },\n      { id: 'id-3', text: 'А это стандартная Todo', type: 'standart', completed: false },\n      {\n        id: 'id-4',\n        text:\n          'Что-бы добавить свою Todo необходимо в графе ниже ввести текст и нажать на кнопку Добавить, после чего новая Todo появится первой в списке',\n        type: 'standart',\n        completed: false,\n      },\n      {\n        id: 'id-5',\n        text:\n          'Todo можно двигать выше и ниже при помощи стрелочек, что позволяет пользователю хранить Todo как ему больше нравится (например важные поднять повыше, а выполненные отправить вниз)',\n        type: 'standart',\n        completed: false,\n      },\n      {\n        id: 'id-6',\n        text: 'Карандашик позже будет давать возможность редактировать Todo',\n        type: 'standart',\n        completed: false,\n      },\n      {\n        id: 'id-7',\n        text: 'Крестик полностью удаляет Todo из списка',\n        type: 'standart',\n        completed: false,\n      },\n      {\n        id: 'id-8',\n        text: 'А вот так вот выглядит выполненная Todo',\n        type: 'standart',\n        completed: true,\n      },\n      {\n        id: 'id-9',\n        text: 'Чем больше выполненных Todo тем лучше ✅',\n        type: 'standart',\n        completed: true,\n      },\n      {\n        id: 'id-10',\n        text: 'Теперь можно удалять все эти Todo и добавлять свои 😊',\n        type: 'standart',\n        completed: true,\n      },\n    ],\n    todoToUpdateText: '',\n    todoToUpdateId: '',\n    isTodoEditing: false,\n  };\n\n  componentDidMount() {\n    const todos = JSON.parse(localStorage.getItem('todos'));\n    todos !== null && this.setState({ todos: todos });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    prevState.todos !== this.state.todos && localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    // localStorage.clear();\n  }\n\n  handleFormSubmit = todo => this.setState({ todos: [todo, ...this.state.todos] });\n\n  upTodo = index => {\n    if (index !== 0) {\n      const newTodos = this.state.todos;\n      const clickedTodo = newTodos[index];\n      newTodos.splice(index, 1);\n      newTodos.splice(index - 1, 0, clickedTodo);\n      console.log(newTodos);\n\n      this.setState({ todos: newTodos });\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n    }\n  };\n\n  downTodo = index => {\n    if (index !== this.state.todos.length - 1) {\n      const newTodos = this.state.todos;\n      const clickedTodo = newTodos[index];\n      newTodos.splice(index, 1);\n      newTodos.splice(index + 1, 0, clickedTodo);\n      console.log(newTodos);\n\n      this.setState({ todos: newTodos });\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n    }\n  };\n\n  handleTodoEdit = (text, id) => this.setState({ todoToUpdateText: text, todoToUpdateId: id, isTodoEditing: true });\n\n  handleTodoTextEdit = text => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (todo.id === this.state.todoToUpdateId ? { ...todo, text } : todo)),\n    }));\n  };\n\n  closeEditingForm = () => this.setState({ isTodoEditing: false });\n\n  handleTodoDelete = id => {\n    this.setState({ todos: this.state.todos.filter(todo => todo.id !== id) });\n  };\n\n  onTodoClick = id => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (todo.id === id ? { ...todo, completed: !todo.completed } : todo)),\n    }));\n  };\n\n  render() {\n    return (\n      <>\n        <Stats todos={this.state.todos} />\n        <TodoList>\n          <Todo\n            todos={this.state.todos}\n            upTodo={this.upTodo}\n            downTodo={this.downTodo}\n            handleTodoEdit={this.handleTodoEdit}\n            handleTodoDelete={this.handleTodoDelete}\n            isTodoDeleting={this.state.isTodoDeleting}\n            onTodoClick={this.onTodoClick}\n          />\n        </TodoList>\n        {!this.state.isTodoEditing && <TodoCreator todos={this.state.todos} handleFormSubmit={this.handleFormSubmit} />}\n        {this.state.isTodoEditing && <Backdrop closeEditingForm={this.closeEditingForm} />}\n        {this.state.isTodoEditing && (\n          <TodoEditor\n            todoText={this.state.todoToUpdateText}\n            handleTodoTextEdit={this.handleTodoTextEdit}\n            closeEditingForm={this.closeEditingForm}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}